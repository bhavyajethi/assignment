from pydantic import BaseModel, Field
from typing import Optional, Dict, List, Any
from datetime import datetime
from enum import Enum

class InterviewStatus(str, Enum):
    """Interview Status Enumeration"""
    NOT_STARTED =  "not_started"
    IN_PROGRESS = "in_progress"
    COMPLETED = "completed"
    ABADONED = "abandoned"

class InterviewSession(BaseModel):
    """Interview session model - AI manages the whole interview process."""
    session_id: str = Field(..., description="Unique session idetifier")
    status: InterviewStatus = Field(default = InterviewStatus.NOT_STARTED)

    # AI generated interview plan
    interview_plan: Optional[Dict] = Field(None, description="AI-generated interview plan")

    # AI generated question
    questions: List[dict] = Field(default_factory=list, description="AI-generated questions")

    # Candidate response
    responses = List[dict] = Field(default_factory=list, description="Candidate Answers")

    # Interview progress
    current_question_index: int = Field(default=0)
    total_questions: int = Field(default=0)

    # Timestamps
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None

    # AI greeting and flow
    ai_greeting: Optional[str] = Field(None, description="AI-generated greeting")
    ai_messages: Optional[str] = Field(default_factory=list, description="AI-generated messages")

    class Config:
        json_schema_extra = {
            "exmaple": {
                "session_id": "abc123-session",
                "status": "in_progress",
                "interview_plan": {
                    "focus_areas" : ["system design"],
                    "estimated_duration": "30 minutes",
                },
                "questions": [
                    {
                        "question": "Tell about yourself and your background.",
                        "type": "technical",
                        "generated_by": "ai"
                    }
                ],
                "responses": [
                    {
                        "question_number": 1,
                        "response": "I am a software engineer with experience in system design and development."
                    }
                ],
                "current_question_index": 1,
                "total_questions": 15
            }
        }

class InterviewQuestion(BaseModel):
    """Interview questions model - generated by ai"""
    question_number: int
    question_text: str = Field(..., description="AI generated questions")

    # AI determines these dynamically
    question_type: Optional[str] = Field(None, description="AI classified type")
    difficuilty: Optional[str] = Field(None, description="AI designed difficulty")
    skills_tested: Optional[str] = Field(default_factory=list, description="AI identified skills tested")

    # MetaData
    generated_by: str = Field(default="ai", description="AI for our system")
    generated_at: datetime = Field(default_factory=datetime.now)
    estimated_time: Optional[str] = Field(None, description="AI estimated answer time")

    class Config:
        json_schema_extra = {
            "example": {
                "question_number": 1,
                "question_text": "Describe your experience with microservices architechture",
                "question_type": "technical",
                "difficuilty": "medium",
                "skills_treated": ["microservices"],
                "generated_by": "ai",
                "estimated_time": "5 minutes"
            }
        }

class InterviewResponse(BaseModel):
    """candidate response model"""
    question_number: int
    question_text: str
    response_text: str = Field(..., description="Candidate response to the question")

    # AI analysis of the response
    ai_analysis: Optional[dict] = Field(default_factory=dict, description="AI analysis of the response")
    
    # Metadata
    responded_at: datetime = Field(default_factory=datetime.now)
    response_duration: Optional[int] = Field(None, description="Time taken to respond in seconds")
    
    class Config:
        json_schema_extra = {
            "example": {
                "question_number": 1,
                "question_text": "Tell me about your Python experience",
                "response_text": "I have been working with Python for 3 years...",
                "ai_analysis": {
                    "score": 8,
                    "feedback": "Strong response with specific examples",
                    "strengths": ["Clear communication", "Relevant examples"]
                },
                "responded_at": "2024-01-01T10:30:00"
            }
        }


class InterviewPreferences(BaseModel):
    """Interview preferences/settings."""
    
    interview_type: str = Field(default="general", description="Interview focus")
    difficulty_level: str = Field(default="medium", description="Difficulty level")
    target_duration_minutes: int = Field(default=30, description="Target interview length")
    
    # AI will adapt based on these preferences
    focus_areas: List[str] = Field(default_factory=list, description="Areas to focus on")
    
    class Config:
        json_schema_extra = {
            "example": {
                "interview_type": "technical",
                "difficulty_level": "medium",
                "target_duration_minutes": 30,
                "focus_areas": ["Python", "System Design", "Databases"]
            }
        }


class InterviewProgress(BaseModel):
    """Real-time interview progress tracking."""
    
    session_id: str
    current_question: int
    total_questions: int
    questions_answered: int
    completion_percentage: float
    estimated_time_remaining: str
    
    class Config:
        json_schema_extra = {
            "example": {
                "session_id": "abc123",
                "current_question": 5,
                "total_questions": 10,
                "questions_answered": 4,
                "completion_percentage": 40.0,
                "estimated_time_remaining": "15 minutes"
            }
        }